#Launch AWS EC2 instance using Amazon Linux AMI with LB and Security group assigned to it
#Create SG
#Create Elastic Load Balance
#Launch EC2 Instance and added ip in known_hosts
#Install httpd and add a index page
#Add Ec2 in ELB



- name: Provision a sample AWS infrastructure
  hosts: localhost
  gather_facts: False
  vars:
    application: DevCops
    keypair: DevOps-yks
    #image: ami-0019ef04ac50be30f                #Amazon Linux 
    #image: ami-08949fb6466dd2cf3                #Red Hat Linux 8
    image: ami-069339bea0125f50d                #Ubuntu 16.04
    #image: ami-06397100adf427136                #Ubuntu 18.04
    region: us-west-1
    instance_count: 1                            #update counts according to your node
    i_name: K8s-wk2

  tasks:
    - name: Get my system IP address
      uri:
        url: http://checkip.amazonaws.com/
        return_content: yes
      register: my_ip

    - name: Create security group
      ec2_group:
        name: webservers
        description: A security group for my system IP or 0.0.0.0/0
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            #cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32" 
            cidr_ip:  0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            #cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
            cidr_ip:  0.0.0.0/0
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: webservers_group

    - name: Create the ELB to listen over http port 80 only
      ec2_elb_lb:
        name: "{{ application }}-load-balancer"
        state: present
        region: "{{region}}"
        zones:
          - us-west-1a
          - us-west-1b
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

    - name: Launch EC2 instances 
      ec2:
        key_name: "{{ keypair }}"
        instance_type: t2.micro
        image: "{{ image }}"
        region: "{{region}}"
        user_data: "{{ lookup('file', 'k8s_setup.sh') }}" 
        group_id:
          - "{{ webservers_group.group_id }}"
          - "{{ elb.elb.security_group_ids | first }}"
        wait: yes
        instance_tags:
          Name: "{{ i_name }}"
        exact_count: "{{ instance_count }}"
        count_tag:
          Name: "{{ application }}"
      register: ec2_instances

    - name: Store EC2 instance IPs to provision against
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: ec2_instance_ips
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Wait for servers to come online
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
      with_items: "{{ ec2_instances.tagged_instances }}"

    - name: Add EC2 instances as known_hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ ec2_instances.tagged_instances }}"


- hosts: localhost
  gather_facts: False
  tasks:
    - name: Add each EC2 instance to the Load Balancer
      ec2_elb:
        state: present
        wait: no
        #ec2_elbs: "{{ application }}-load-balancer"
        ec2_elbs: DevCops-load-balancer
        region: "{{ item.region }}"
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_instances.tagged_instances }}"

